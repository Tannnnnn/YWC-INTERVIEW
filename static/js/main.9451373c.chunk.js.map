{"version":3,"sources":["components/Movie.js","components/Index.js","App.js","serviceWorker.js","index.js"],"names":["Movie","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","movieData","props","react_default","a","createElement","className","b","length","map","e","i","src","concat","backdrop_path","size","style","marginTop","fontWeight","color","title","vote_average","paddingLeft","vote_count","original_title","release_date","overview","data","Component","index","_this","call","state","resultData","_this2","axios","get","then","res","setState","results","catch","error","console","log","dateObj","Date","month","getUTCMonth","newdate","getUTCDate","getUTCFullYear","components_Movie","App","Index","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9451373c.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class Movie extends Component {\r\n  render() {\r\n    const { movieData } = this.props\r\n    const data = () => {\r\n      let b\r\n      if (movieData.length !== 0 ) {\r\n        b = movieData.map( (e , i) => {          \r\n          return(\r\n            <div className=\"column is-half\" key={i}>\r\n              <div className=\"card\">\r\n                <div className=\"card-image\">\r\n                  <figure className=\"image is-3by2\">\r\n                    <img src={`https://image.tmdb.org/t/p/w500_and_h282_face${e.backdrop_path}`} size=\"63px\"/>\r\n                  </figure>\r\n                </div>\r\n                <div className=\"card-content\">\r\n                  <div className=\"media\">\r\n                    <div className=\"media-left\" style={{ marginTop : '-4px' , fontWeight : '500'}}>\r\n                        <center>\r\n                          <i className=\"far fa-star\" style={{color : ''}} title=\"Average Rating\"/>\r\n                        </center>\r\n                        <span>\r\n                          <a style={{ color : \"red\"}}>{e.vote_average}</a>/10\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"media-content\" style={{ paddingLeft : '10px', marginTop : '-5px' , fontWeight : '500'}}>\r\n                      <i className=\"fas fa-users\" title=\"All ratings\"/><br/>\r\n                      <span>\r\n                        <a style={{ color : \"blue\"}}>{e.vote_count}</a>\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"media-content\" style={{ paddingLeft : '10px' , marginTop : '-3px'}}>\r\n                      <p className=\"title is-6\">{e.original_title}</p>\r\n                      <p className=\"subtitle is-6\">Release Date : {e.release_date}</p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"content\">\r\n                    {e.overview}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )\r\n        })\r\n      }\r\n      return b\r\n    }\r\n    \r\n    return (\r\n      <div>\r\n        <div className=\"columns is-multiline is-mobile\">\r\n          {data()}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Movie\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios';\r\nimport Movie from './Movie'\r\n// import styled from 'styled-components';\r\n\r\nexport class index extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      movieData : [] ,\r\n      resultData : []\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    const url = `https://api.themoviedb.org/3/movie/now_playing?api_key=55e9e7fd17ff251e724c28e729a00ab2&language=en-US&page=1`\r\n    axios.get(url)\r\n    .then( res => {\r\n      this.setState({ \r\n        movieData : res.data.results\r\n      })\r\n    })\r\n    .catch( error => {\r\n      console.log(error);\r\n    })\r\n  }\r\n\r\n  render() {    \r\n    let dateObj = new Date();\r\n    let month = dateObj.getUTCMonth() + 1; //months from 1-12\r\n    let day = dateObj.getUTCDate();\r\n    let year = dateObj.getUTCFullYear();\r\n    let newdate = day + \"/\" + month + \"/\" + year;\r\n   \r\n    return (\r\n      <div>\r\n        <section className=\"hero\">\r\n          <div className=\"hero-body\">\r\n            <div className=\"container\">\r\n              <h1 className=\"title\" style={{ color : 'white'}}>\r\n              <i className=\"fas fa-film\"/>\r\n                &nbsp;Now Showing <small>( {newdate} )</small>\r\n              </h1>\r\n              <hr /><br/>\r\n              <Movie {...this.state}/>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default index\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Index from './components/Index'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"\">\n        <Index />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bulma/css/bulma.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}